package com.szy;import com.alibaba.fastjson.serializer.SerializerFeature;import com.alibaba.fastjson.support.config.FastJsonConfig;import com.szy.util.DBUtil;import org.apache.ibatis.session.SqlSessionFactory;import org.apache.tomcat.jdbc.pool.DataSource;import org.mybatis.spring.SqlSessionFactoryBean;import org.mybatis.spring.annotation.MapperScan;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.EnableAutoConfiguration;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.boot.autoconfigure.web.HttpMessageConverters;import org.springframework.boot.context.properties.ConfigurationProperties;import org.springframework.boot.web.servlet.ServletComponentScan;import org.springframework.context.ApplicationContext;import org.springframework.context.annotation.Bean;import org.springframework.core.io.support.PathMatchingResourcePatternResolver;import org.springframework.http.converter.HttpMessageConverter;@SpringBootApplication@EnableAutoConfiguration@MapperScan("com.szy.db.mapper")@ServletComponentScanpublic class ApplicationStart {	private static ApplicationContext context;	public static <T> T getBean(Class<T> clazz){		return context.getBean(clazz);	}	@Bean	@ConfigurationProperties(prefix = "spring.datasource")	public DataSource dataSource() {		return new org.apache.tomcat.jdbc.pool.DataSource();	}	@Bean	public SqlSessionFactory sqlSessionFactoryBean() throws Exception {		SqlSessionFactoryBean sqlSessionFactoryBean = new SqlSessionFactoryBean();		sqlSessionFactoryBean.setDataSource(dataSource());		PathMatchingResourcePatternResolver resolver = new PathMatchingResourcePatternResolver();		sqlSessionFactoryBean.setMapperLocations(resolver.getResources("classpath:/mapper/*Mapper.xml"));		return sqlSessionFactoryBean.getObject();	}	@Bean	public HttpMessageConverters fastJsonHttpMessageConverters() {		DivisionHttpMessageConverter httpConverter = new DivisionHttpMessageConverter();		FastJsonConfig fastJsonConfig = new FastJsonConfig();		fastJsonConfig.setSerializerFeatures(SerializerFeature.PrettyFormat);		httpConverter.setFastJsonConfig(fastJsonConfig);		HttpMessageConverter<?> converter = httpConverter;		return new HttpMessageConverters(converter);	}	public static void main(String[] args) {		context = SpringApplication.run(ApplicationStart.class, args);		DBUtil.setContext(context);	}}